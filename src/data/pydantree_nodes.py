# Generated by pydantree.codegen - DO NOT EDIT
from __future__ import annotations

from typing import List, Optional
from pydantic import BaseModel
from pydantree.core import TSNode

# Registry for runtime node creation
NODE_MAP: dict[str, type[TSNode]] = {}

class CompoundStatementNode(TSNode):
    """Generated node for _compound_statement."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['_compound_statement'] = CompoundStatementNode

class SimpleStatementNode(TSNode):
    """Generated node for _simple_statement."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['_simple_statement'] = SimpleStatementNode

class ExpressionNode(TSNode):
    """Generated node for expression."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['expression'] = ExpressionNode

class ParameterNode(TSNode):
    """Generated node for parameter."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['parameter'] = ParameterNode

class PatternNode(TSNode):
    """Generated node for pattern."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['pattern'] = PatternNode

class PrimaryExpressionNode(ExpressionNode):
    """Generated node for primary_expression."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['primary_expression'] = PrimaryExpressionNode

class AliasedImportNode(TSNode):
    """Generated node for aliased_import."""
    __match_args__ = ('type_name', 'alias', 'name')
    @property
    def alias(self) -> IdentifierNode:
        """Access alias field."""
        for child in self.children:
            if child.field_name == 'alias':
                return child
        raise ValueError(f'Required field alias not found')

    @property
    def name(self) -> DottedNameNode:
        """Access name field."""
        for child in self.children:
            if child.field_name == 'name':
                return child
        raise ValueError(f'Required field name not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['aliased_import'] = AliasedImportNode

class ArgumentListNode(TSNode):
    """Generated node for argument_list."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['argument_list'] = ArgumentListNode

class AsPatternNode(ExpressionNode):
    """Generated node for as_pattern."""
    __match_args__ = ('type_name', 'alias')
    @property
    def alias(self) -> Optional[TSNode]:
        """Access alias field."""
        for child in self.children:
            if child.field_name == 'alias':
                return child
        return None

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['as_pattern'] = AsPatternNode

class AssertStatementNode(SimpleStatementNode):
    """Generated node for assert_statement."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['assert_statement'] = AssertStatementNode

class AssignmentNode(TSNode):
    """Generated node for assignment."""
    __match_args__ = ('type_name', 'left', 'right', 'type')
    @property
    def left(self) -> PatternNode | PatternListNode:
        """Access left field."""
        for child in self.children:
            if child.field_name == 'left':
                return child
        raise ValueError(f'Required field left not found')

    @property
    def right(self) -> Optional[AssignmentNode | AugmentedAssignmentNode | ExpressionNode | ExpressionListNode | PatternListNode | YieldTokenNode]:
        """Access right field."""
        for child in self.children:
            if child.field_name == 'right':
                return child
        return None

    @property
    def type(self) -> Optional[TypeTokenNode]:
        """Access type field."""
        for child in self.children:
            if child.field_name == 'type':
                return child
        return None

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['assignment'] = AssignmentNode

class AttributeNode(PrimaryExpressionNode):
    """Generated node for attribute."""
    __match_args__ = ('type_name', 'attribute', 'object')
    @property
    def attribute(self) -> IdentifierNode:
        """Access attribute field."""
        for child in self.children:
            if child.field_name == 'attribute':
                return child
        raise ValueError(f'Required field attribute not found')

    @property
    def object(self) -> PrimaryExpressionNode:
        """Access object field."""
        for child in self.children:
            if child.field_name == 'object':
                return child
        raise ValueError(f'Required field object not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['attribute'] = AttributeNode

class AugmentedAssignmentNode(TSNode):
    """Generated node for augmented_assignment."""
    __match_args__ = ('type_name', 'left', 'operator', 'right')
    @property
    def left(self) -> PatternNode | PatternListNode:
        """Access left field."""
        for child in self.children:
            if child.field_name == 'left':
                return child
        raise ValueError(f'Required field left not found')

    @property
    def operator(self) -> ModEqualsTokenNode | AmpersandEqualsTokenNode | PowerEqualsTokenNode | TimesEqualsTokenNode | PlusEqualsTokenNode | MinusEqualsTokenNode | FloorDivEqualsTokenNode | DivideEqualsTokenNode | LeftShiftEqualsTokenNode | RightShiftEqualsTokenNode | AtEqualsTokenNode | CaretEqualsTokenNode | PipeEqualsTokenNode:
        """Access operator field."""
        for child in self.children:
            if child.field_name == 'operator':
                return child
        raise ValueError(f'Required field operator not found')

    @property
    def right(self) -> AssignmentNode | AugmentedAssignmentNode | ExpressionNode | ExpressionListNode | PatternListNode | YieldTokenNode:
        """Access right field."""
        for child in self.children:
            if child.field_name == 'right':
                return child
        raise ValueError(f'Required field right not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['augmented_assignment'] = AugmentedAssignmentNode

class AwaitTokenNode(PrimaryExpressionNode):
    """Generated node for await."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['await'] = AwaitTokenNode

class BinaryOperatorNode(PrimaryExpressionNode):
    """Generated node for binary_operator."""
    __match_args__ = ('type_name', 'left', 'operator', 'right')
    @property
    def left(self) -> PrimaryExpressionNode:
        """Access left field."""
        for child in self.children:
            if child.field_name == 'left':
                return child
        raise ValueError(f'Required field left not found')

    @property
    def operator(self) -> PercentTokenNode | AmpersandTokenNode | AsteriskTokenNode | PowerTokenNode | PlusTokenNode | MinusTokenNode | SlashTokenNode | FloorDivTokenNode | LeftShiftTokenNode | RightShiftTokenNode | AtTokenNode | CaretTokenNode | PipeTokenNode:
        """Access operator field."""
        for child in self.children:
            if child.field_name == 'operator':
                return child
        raise ValueError(f'Required field operator not found')

    @property
    def right(self) -> PrimaryExpressionNode:
        """Access right field."""
        for child in self.children:
            if child.field_name == 'right':
                return child
        raise ValueError(f'Required field right not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['binary_operator'] = BinaryOperatorNode

class BlockNode(TSNode):
    """Generated node for block."""
    __match_args__ = ('type_name', 'alternative')
    @property
    def alternative(self) -> Optional[List[CaseClauseNode]]:
        """Access alternative field."""
        result = []
        for child in self.children:
            if child.field_name == 'alternative':
                result.append(child)
        return result

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['block'] = BlockNode

class BooleanOperatorNode(ExpressionNode):
    """Generated node for boolean_operator."""
    __match_args__ = ('type_name', 'left', 'operator', 'right')
    @property
    def left(self) -> ExpressionNode:
        """Access left field."""
        for child in self.children:
            if child.field_name == 'left':
                return child
        raise ValueError(f'Required field left not found')

    @property
    def operator(self) -> AndTokenNode | OrTokenNode:
        """Access operator field."""
        for child in self.children:
            if child.field_name == 'operator':
                return child
        raise ValueError(f'Required field operator not found')

    @property
    def right(self) -> ExpressionNode:
        """Access right field."""
        for child in self.children:
            if child.field_name == 'right':
                return child
        raise ValueError(f'Required field right not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['boolean_operator'] = BooleanOperatorNode

class BreakStatementNode(SimpleStatementNode):
    """Generated node for break_statement."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['break_statement'] = BreakStatementNode

class CallNode(PrimaryExpressionNode):
    """Generated node for call."""
    __match_args__ = ('type_name', 'arguments', 'function')
    @property
    def arguments(self) -> ArgumentListNode | GeneratorExpressionNode:
        """Access arguments field."""
        for child in self.children:
            if child.field_name == 'arguments':
                return child
        raise ValueError(f'Required field arguments not found')

    @property
    def function(self) -> PrimaryExpressionNode:
        """Access function field."""
        for child in self.children:
            if child.field_name == 'function':
                return child
        raise ValueError(f'Required field function not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['call'] = CallNode

class CaseClauseNode(TSNode):
    """Generated node for case_clause."""
    __match_args__ = ('type_name', 'consequence', 'guard')
    @property
    def consequence(self) -> BlockNode:
        """Access consequence field."""
        for child in self.children:
            if child.field_name == 'consequence':
                return child
        raise ValueError(f'Required field consequence not found')

    @property
    def guard(self) -> Optional[IfClauseNode]:
        """Access guard field."""
        for child in self.children:
            if child.field_name == 'guard':
                return child
        return None

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['case_clause'] = CaseClauseNode

class CasePatternNode(TSNode):
    """Generated node for case_pattern."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['case_pattern'] = CasePatternNode

class ChevronNode(TSNode):
    """Generated node for chevron."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['chevron'] = ChevronNode

class ClassDefinitionNode(CompoundStatementNode):
    """Generated node for class_definition."""
    __match_args__ = ('type_name', 'body', 'name', 'superclasses', 'type_parameters')
    @property
    def body(self) -> BlockNode:
        """Access body field."""
        for child in self.children:
            if child.field_name == 'body':
                return child
        raise ValueError(f'Required field body not found')

    @property
    def name(self) -> IdentifierNode:
        """Access name field."""
        for child in self.children:
            if child.field_name == 'name':
                return child
        raise ValueError(f'Required field name not found')

    @property
    def superclasses(self) -> Optional[ArgumentListNode]:
        """Access superclasses field."""
        for child in self.children:
            if child.field_name == 'superclasses':
                return child
        return None

    @property
    def type_parameters(self) -> Optional[TypeParameterNode]:
        """Access type_parameters field."""
        for child in self.children:
            if child.field_name == 'type_parameters':
                return child
        return None

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['class_definition'] = ClassDefinitionNode

class ClassPatternNode(TSNode):
    """Generated node for class_pattern."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['class_pattern'] = ClassPatternNode

class ComparisonOperatorNode(ExpressionNode):
    """Generated node for comparison_operator."""
    __match_args__ = ('type_name', 'operators')
    @property
    def operators(self) -> List[NotEqualsTokenNode | LessThanTokenNode | LessEqualsTokenNode | NotEqualsAltTokenNode | EqualityTokenNode | GreaterThanTokenNode | GreaterEqualsTokenNode | InTokenNode | IsTokenNode | IsNotTokenNode | NotInTokenNode]:
        """Access operators field."""
        result = []
        for child in self.children:
            if child.field_name == 'operators':
                result.append(child)
        return result

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['comparison_operator'] = ComparisonOperatorNode

class ComplexPatternNode(TSNode):
    """Generated node for complex_pattern."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['complex_pattern'] = ComplexPatternNode

class ConcatenatedStringNode(PrimaryExpressionNode):
    """Generated node for concatenated_string."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['concatenated_string'] = ConcatenatedStringNode

class ConditionalExpressionNode(ExpressionNode):
    """Generated node for conditional_expression."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['conditional_expression'] = ConditionalExpressionNode

class ConstrainedTypeNode(TSNode):
    """Generated node for constrained_type."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['constrained_type'] = ConstrainedTypeNode

class ContinueStatementNode(SimpleStatementNode):
    """Generated node for continue_statement."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['continue_statement'] = ContinueStatementNode

class DecoratedDefinitionNode(CompoundStatementNode):
    """Generated node for decorated_definition."""
    __match_args__ = ('type_name', 'definition')
    @property
    def definition(self) -> ClassDefinitionNode | FunctionDefinitionNode:
        """Access definition field."""
        for child in self.children:
            if child.field_name == 'definition':
                return child
        raise ValueError(f'Required field definition not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['decorated_definition'] = DecoratedDefinitionNode

class DecoratorNode(TSNode):
    """Generated node for decorator."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['decorator'] = DecoratorNode

class DefaultParameterNode(ParameterNode):
    """Generated node for default_parameter."""
    __match_args__ = ('type_name', 'name', 'value')
    @property
    def name(self) -> IdentifierNode | TuplePatternNode:
        """Access name field."""
        for child in self.children:
            if child.field_name == 'name':
                return child
        raise ValueError(f'Required field name not found')

    @property
    def value(self) -> ExpressionNode:
        """Access value field."""
        for child in self.children:
            if child.field_name == 'value':
                return child
        raise ValueError(f'Required field value not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['default_parameter'] = DefaultParameterNode

class DeleteStatementNode(SimpleStatementNode):
    """Generated node for delete_statement."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['delete_statement'] = DeleteStatementNode

class DictPatternNode(TSNode):
    """Generated node for dict_pattern."""
    __match_args__ = ('type_name', 'key', 'value')
    @property
    def key(self) -> Optional[List[MinusTokenNode | UnderscoreTokenNode | ClassPatternNode | ComplexPatternNode | ConcatenatedStringNode | DictPatternNode | DottedNameNode | FalseNode | FloatNode | IntegerNode | ListPatternNode | NoneNode | SplatPatternNode | StringNode | TrueNode | TuplePatternNode | UnionPatternNode]]:
        """Access key field."""
        result = []
        for child in self.children:
            if child.field_name == 'key':
                result.append(child)
        return result

    @property
    def value(self) -> Optional[List[CasePatternNode]]:
        """Access value field."""
        result = []
        for child in self.children:
            if child.field_name == 'value':
                result.append(child)
        return result

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['dict_pattern'] = DictPatternNode

class DictionaryNode(PrimaryExpressionNode):
    """Generated node for dictionary."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['dictionary'] = DictionaryNode

class DictionaryComprehensionNode(PrimaryExpressionNode):
    """Generated node for dictionary_comprehension."""
    __match_args__ = ('type_name', 'body')
    @property
    def body(self) -> PairNode:
        """Access body field."""
        for child in self.children:
            if child.field_name == 'body':
                return child
        raise ValueError(f'Required field body not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['dictionary_comprehension'] = DictionaryComprehensionNode

class DictionarySplatNode(TSNode):
    """Generated node for dictionary_splat."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['dictionary_splat'] = DictionarySplatNode

class DictionarySplatPatternNode(ParameterNode):
    """Generated node for dictionary_splat_pattern."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['dictionary_splat_pattern'] = DictionarySplatPatternNode

class DottedNameNode(TSNode):
    """Generated node for dotted_name."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['dotted_name'] = DottedNameNode

class ElifClauseNode(TSNode):
    """Generated node for elif_clause."""
    __match_args__ = ('type_name', 'condition', 'consequence')
    @property
    def condition(self) -> ExpressionNode:
        """Access condition field."""
        for child in self.children:
            if child.field_name == 'condition':
                return child
        raise ValueError(f'Required field condition not found')

    @property
    def consequence(self) -> BlockNode:
        """Access consequence field."""
        for child in self.children:
            if child.field_name == 'consequence':
                return child
        raise ValueError(f'Required field consequence not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['elif_clause'] = ElifClauseNode

class ElseClauseNode(TSNode):
    """Generated node for else_clause."""
    __match_args__ = ('type_name', 'body')
    @property
    def body(self) -> BlockNode:
        """Access body field."""
        for child in self.children:
            if child.field_name == 'body':
                return child
        raise ValueError(f'Required field body not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['else_clause'] = ElseClauseNode

class ExceptClauseNode(TSNode):
    """Generated node for except_clause."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['except_clause'] = ExceptClauseNode

class ExceptGroupClauseNode(TSNode):
    """Generated node for except_group_clause."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['except_group_clause'] = ExceptGroupClauseNode

class ExecStatementNode(SimpleStatementNode):
    """Generated node for exec_statement."""
    __match_args__ = ('type_name', 'code')
    @property
    def code(self) -> IdentifierNode | StringNode:
        """Access code field."""
        for child in self.children:
            if child.field_name == 'code':
                return child
        raise ValueError(f'Required field code not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['exec_statement'] = ExecStatementNode

class ExpressionListNode(TSNode):
    """Generated node for expression_list."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['expression_list'] = ExpressionListNode

class ExpressionStatementNode(SimpleStatementNode):
    """Generated node for expression_statement."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['expression_statement'] = ExpressionStatementNode

class FinallyClauseNode(TSNode):
    """Generated node for finally_clause."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['finally_clause'] = FinallyClauseNode

class ForInClauseNode(TSNode):
    """Generated node for for_in_clause."""
    __match_args__ = ('type_name', 'left', 'right')
    @property
    def left(self) -> PatternNode | PatternListNode:
        """Access left field."""
        for child in self.children:
            if child.field_name == 'left':
                return child
        raise ValueError(f'Required field left not found')

    @property
    def right(self) -> List[CommaTokenNode | ExpressionNode]:
        """Access right field."""
        result = []
        for child in self.children:
            if child.field_name == 'right':
                result.append(child)
        return result

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['for_in_clause'] = ForInClauseNode

class ForStatementNode(CompoundStatementNode):
    """Generated node for for_statement."""
    __match_args__ = ('type_name', 'alternative', 'body', 'left', 'right')
    @property
    def alternative(self) -> Optional[ElseClauseNode]:
        """Access alternative field."""
        for child in self.children:
            if child.field_name == 'alternative':
                return child
        return None

    @property
    def body(self) -> BlockNode:
        """Access body field."""
        for child in self.children:
            if child.field_name == 'body':
                return child
        raise ValueError(f'Required field body not found')

    @property
    def left(self) -> PatternNode | PatternListNode:
        """Access left field."""
        for child in self.children:
            if child.field_name == 'left':
                return child
        raise ValueError(f'Required field left not found')

    @property
    def right(self) -> ExpressionNode | ExpressionListNode:
        """Access right field."""
        for child in self.children:
            if child.field_name == 'right':
                return child
        raise ValueError(f'Required field right not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['for_statement'] = ForStatementNode

class FormatExpressionNode(TSNode):
    """Generated node for format_expression."""
    __match_args__ = ('type_name', 'expression', 'format_specifier', 'type_conversion')
    @property
    def expression(self) -> ExpressionNode | ExpressionListNode | PatternListNode | YieldTokenNode:
        """Access expression field."""
        for child in self.children:
            if child.field_name == 'expression':
                return child
        raise ValueError(f'Required field expression not found')

    @property
    def format_specifier(self) -> Optional[FormatSpecifierNode]:
        """Access format_specifier field."""
        for child in self.children:
            if child.field_name == 'format_specifier':
                return child
        return None

    @property
    def type_conversion(self) -> Optional[TypeConversionNode]:
        """Access type_conversion field."""
        for child in self.children:
            if child.field_name == 'type_conversion':
                return child
        return None

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['format_expression'] = FormatExpressionNode

class FormatSpecifierNode(TSNode):
    """Generated node for format_specifier."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['format_specifier'] = FormatSpecifierNode

class FunctionDefinitionNode(CompoundStatementNode):
    """Generated node for function_definition."""
    __match_args__ = ('type_name', 'body', 'name', 'parameters', 'return_type', 'type_parameters')
    @property
    def body(self) -> BlockNode:
        """Access body field."""
        for child in self.children:
            if child.field_name == 'body':
                return child
        raise ValueError(f'Required field body not found')

    @property
    def name(self) -> IdentifierNode:
        """Access name field."""
        for child in self.children:
            if child.field_name == 'name':
                return child
        raise ValueError(f'Required field name not found')

    @property
    def parameters(self) -> ParametersNode:
        """Access parameters field."""
        for child in self.children:
            if child.field_name == 'parameters':
                return child
        raise ValueError(f'Required field parameters not found')

    @property
    def return_type(self) -> Optional[TypeTokenNode]:
        """Access return_type field."""
        for child in self.children:
            if child.field_name == 'return_type':
                return child
        return None

    @property
    def type_parameters(self) -> Optional[TypeParameterNode]:
        """Access type_parameters field."""
        for child in self.children:
            if child.field_name == 'type_parameters':
                return child
        return None

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['function_definition'] = FunctionDefinitionNode

class FutureImportStatementNode(SimpleStatementNode):
    """Generated node for future_import_statement."""
    __match_args__ = ('type_name', 'name')
    @property
    def name(self) -> List[AliasedImportNode | DottedNameNode]:
        """Access name field."""
        result = []
        for child in self.children:
            if child.field_name == 'name':
                result.append(child)
        return result

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['future_import_statement'] = FutureImportStatementNode

class GeneratorExpressionNode(PrimaryExpressionNode):
    """Generated node for generator_expression."""
    __match_args__ = ('type_name', 'body')
    @property
    def body(self) -> ExpressionNode:
        """Access body field."""
        for child in self.children:
            if child.field_name == 'body':
                return child
        raise ValueError(f'Required field body not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['generator_expression'] = GeneratorExpressionNode

class GenericTypeNode(TSNode):
    """Generated node for generic_type."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['generic_type'] = GenericTypeNode

class GlobalStatementNode(SimpleStatementNode):
    """Generated node for global_statement."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['global_statement'] = GlobalStatementNode

class IfClauseNode(TSNode):
    """Generated node for if_clause."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['if_clause'] = IfClauseNode

class IfStatementNode(CompoundStatementNode):
    """Generated node for if_statement."""
    __match_args__ = ('type_name', 'alternative', 'condition', 'consequence')
    @property
    def alternative(self) -> Optional[List[ElifClauseNode | ElseClauseNode]]:
        """Access alternative field."""
        result = []
        for child in self.children:
            if child.field_name == 'alternative':
                result.append(child)
        return result

    @property
    def condition(self) -> ExpressionNode:
        """Access condition field."""
        for child in self.children:
            if child.field_name == 'condition':
                return child
        raise ValueError(f'Required field condition not found')

    @property
    def consequence(self) -> BlockNode:
        """Access consequence field."""
        for child in self.children:
            if child.field_name == 'consequence':
                return child
        raise ValueError(f'Required field consequence not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['if_statement'] = IfStatementNode

class ImportFromStatementNode(SimpleStatementNode):
    """Generated node for import_from_statement."""
    __match_args__ = ('type_name', 'module_name', 'name')
    @property
    def module_name(self) -> DottedNameNode | RelativeImportNode:
        """Access module_name field."""
        for child in self.children:
            if child.field_name == 'module_name':
                return child
        raise ValueError(f'Required field module_name not found')

    @property
    def name(self) -> Optional[List[AliasedImportNode | DottedNameNode]]:
        """Access name field."""
        result = []
        for child in self.children:
            if child.field_name == 'name':
                result.append(child)
        return result

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['import_from_statement'] = ImportFromStatementNode

class ImportPrefixNode(TSNode):
    """Generated node for import_prefix."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['import_prefix'] = ImportPrefixNode

class ImportStatementNode(SimpleStatementNode):
    """Generated node for import_statement."""
    __match_args__ = ('type_name', 'name')
    @property
    def name(self) -> List[AliasedImportNode | DottedNameNode]:
        """Access name field."""
        result = []
        for child in self.children:
            if child.field_name == 'name':
                result.append(child)
        return result

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['import_statement'] = ImportStatementNode

class InterpolationNode(TSNode):
    """Generated node for interpolation."""
    __match_args__ = ('type_name', 'expression', 'format_specifier', 'type_conversion')
    @property
    def expression(self) -> ExpressionNode | ExpressionListNode | PatternListNode | YieldTokenNode:
        """Access expression field."""
        for child in self.children:
            if child.field_name == 'expression':
                return child
        raise ValueError(f'Required field expression not found')

    @property
    def format_specifier(self) -> Optional[FormatSpecifierNode]:
        """Access format_specifier field."""
        for child in self.children:
            if child.field_name == 'format_specifier':
                return child
        return None

    @property
    def type_conversion(self) -> Optional[TypeConversionNode]:
        """Access type_conversion field."""
        for child in self.children:
            if child.field_name == 'type_conversion':
                return child
        return None

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['interpolation'] = InterpolationNode

class KeywordArgumentNode(TSNode):
    """Generated node for keyword_argument."""
    __match_args__ = ('type_name', 'name', 'value')
    @property
    def name(self) -> IdentifierNode:
        """Access name field."""
        for child in self.children:
            if child.field_name == 'name':
                return child
        raise ValueError(f'Required field name not found')

    @property
    def value(self) -> ExpressionNode:
        """Access value field."""
        for child in self.children:
            if child.field_name == 'value':
                return child
        raise ValueError(f'Required field value not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['keyword_argument'] = KeywordArgumentNode

class KeywordPatternNode(TSNode):
    """Generated node for keyword_pattern."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['keyword_pattern'] = KeywordPatternNode

class KeywordSeparatorNode(ParameterNode):
    """Generated node for keyword_separator."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['keyword_separator'] = KeywordSeparatorNode

class LambdaTokenNode(ExpressionNode):
    """Generated node for lambda."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['lambda'] = LambdaTokenNode

class LambdaParametersNode(TSNode):
    """Generated node for lambda_parameters."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['lambda_parameters'] = LambdaParametersNode

class ListNode(PrimaryExpressionNode):
    """Generated node for list."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['list'] = ListNode

class ListComprehensionNode(PrimaryExpressionNode):
    """Generated node for list_comprehension."""
    __match_args__ = ('type_name', 'body')
    @property
    def body(self) -> ExpressionNode:
        """Access body field."""
        for child in self.children:
            if child.field_name == 'body':
                return child
        raise ValueError(f'Required field body not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['list_comprehension'] = ListComprehensionNode

class ListPatternNode(PatternNode):
    """Generated node for list_pattern."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['list_pattern'] = ListPatternNode

class ListSplatNode(PrimaryExpressionNode):
    """Generated node for list_splat."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['list_splat'] = ListSplatNode

class ListSplatPatternNode(PatternNode):
    """Generated node for list_splat_pattern."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['list_splat_pattern'] = ListSplatPatternNode

class MatchStatementNode(CompoundStatementNode):
    """Generated node for match_statement."""
    __match_args__ = ('type_name', 'body', 'subject')
    @property
    def body(self) -> BlockNode:
        """Access body field."""
        for child in self.children:
            if child.field_name == 'body':
                return child
        raise ValueError(f'Required field body not found')

    @property
    def subject(self) -> List[ExpressionNode]:
        """Access subject field."""
        result = []
        for child in self.children:
            if child.field_name == 'subject':
                result.append(child)
        return result

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['match_statement'] = MatchStatementNode

class MemberTypeNode(TSNode):
    """Generated node for member_type."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['member_type'] = MemberTypeNode

class ModuleNode(TSNode):
    """Generated node for module."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['module'] = ModuleNode

class NamedExpressionNode(ExpressionNode):
    """Generated node for named_expression."""
    __match_args__ = ('type_name', 'name', 'value')
    @property
    def name(self) -> IdentifierNode:
        """Access name field."""
        for child in self.children:
            if child.field_name == 'name':
                return child
        raise ValueError(f'Required field name not found')

    @property
    def value(self) -> ExpressionNode:
        """Access value field."""
        for child in self.children:
            if child.field_name == 'value':
                return child
        raise ValueError(f'Required field value not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['named_expression'] = NamedExpressionNode

class NonlocalStatementNode(SimpleStatementNode):
    """Generated node for nonlocal_statement."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['nonlocal_statement'] = NonlocalStatementNode

class NotOperatorNode(ExpressionNode):
    """Generated node for not_operator."""
    __match_args__ = ('type_name', 'argument')
    @property
    def argument(self) -> ExpressionNode:
        """Access argument field."""
        for child in self.children:
            if child.field_name == 'argument':
                return child
        raise ValueError(f'Required field argument not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['not_operator'] = NotOperatorNode

class PairNode(TSNode):
    """Generated node for pair."""
    __match_args__ = ('type_name', 'key', 'value')
    @property
    def key(self) -> ExpressionNode:
        """Access key field."""
        for child in self.children:
            if child.field_name == 'key':
                return child
        raise ValueError(f'Required field key not found')

    @property
    def value(self) -> ExpressionNode:
        """Access value field."""
        for child in self.children:
            if child.field_name == 'value':
                return child
        raise ValueError(f'Required field value not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['pair'] = PairNode

class ParametersNode(TSNode):
    """Generated node for parameters."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['parameters'] = ParametersNode

class ParenthesizedExpressionNode(PrimaryExpressionNode):
    """Generated node for parenthesized_expression."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['parenthesized_expression'] = ParenthesizedExpressionNode

class ParenthesizedListSplatNode(TSNode):
    """Generated node for parenthesized_list_splat."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['parenthesized_list_splat'] = ParenthesizedListSplatNode

class PassStatementNode(SimpleStatementNode):
    """Generated node for pass_statement."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['pass_statement'] = PassStatementNode

class PatternListNode(TSNode):
    """Generated node for pattern_list."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['pattern_list'] = PatternListNode

class PositionalSeparatorNode(ParameterNode):
    """Generated node for positional_separator."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['positional_separator'] = PositionalSeparatorNode

class PrintStatementNode(SimpleStatementNode):
    """Generated node for print_statement."""
    __match_args__ = ('type_name', 'argument')
    @property
    def argument(self) -> Optional[List[ExpressionNode]]:
        """Access argument field."""
        result = []
        for child in self.children:
            if child.field_name == 'argument':
                result.append(child)
        return result

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['print_statement'] = PrintStatementNode

class RaiseStatementNode(SimpleStatementNode):
    """Generated node for raise_statement."""
    __match_args__ = ('type_name', 'cause')
    @property
    def cause(self) -> Optional[ExpressionNode]:
        """Access cause field."""
        for child in self.children:
            if child.field_name == 'cause':
                return child
        return None

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['raise_statement'] = RaiseStatementNode

class RelativeImportNode(TSNode):
    """Generated node for relative_import."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['relative_import'] = RelativeImportNode

class ReturnStatementNode(SimpleStatementNode):
    """Generated node for return_statement."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['return_statement'] = ReturnStatementNode

class SetNode(PrimaryExpressionNode):
    """Generated node for set."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['set'] = SetNode

class SetComprehensionNode(PrimaryExpressionNode):
    """Generated node for set_comprehension."""
    __match_args__ = ('type_name', 'body')
    @property
    def body(self) -> ExpressionNode:
        """Access body field."""
        for child in self.children:
            if child.field_name == 'body':
                return child
        raise ValueError(f'Required field body not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['set_comprehension'] = SetComprehensionNode

class SliceNode(TSNode):
    """Generated node for slice."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['slice'] = SliceNode

class SplatPatternNode(TSNode):
    """Generated node for splat_pattern."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['splat_pattern'] = SplatPatternNode

class SplatTypeNode(TSNode):
    """Generated node for splat_type."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['splat_type'] = SplatTypeNode

class StringNode(PrimaryExpressionNode):
    """Generated node for string."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['string'] = StringNode

class StringContentNode(TSNode):
    """Generated node for string_content."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['string_content'] = StringContentNode

class SubscriptNode(PrimaryExpressionNode):
    """Generated node for subscript."""
    __match_args__ = ('type_name', 'subscript', 'value')
    @property
    def subscript(self) -> List[ExpressionNode | SliceNode]:
        """Access subscript field."""
        result = []
        for child in self.children:
            if child.field_name == 'subscript':
                result.append(child)
        return result

    @property
    def value(self) -> PrimaryExpressionNode:
        """Access value field."""
        for child in self.children:
            if child.field_name == 'value':
                return child
        raise ValueError(f'Required field value not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['subscript'] = SubscriptNode

class TryStatementNode(CompoundStatementNode):
    """Generated node for try_statement."""
    __match_args__ = ('type_name', 'body')
    @property
    def body(self) -> BlockNode:
        """Access body field."""
        for child in self.children:
            if child.field_name == 'body':
                return child
        raise ValueError(f'Required field body not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['try_statement'] = TryStatementNode

class TupleNode(PrimaryExpressionNode):
    """Generated node for tuple."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['tuple'] = TupleNode

class TuplePatternNode(PatternNode):
    """Generated node for tuple_pattern."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['tuple_pattern'] = TuplePatternNode

class TypeTokenNode(TSNode):
    """Generated node for type."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['type'] = TypeTokenNode

class TypeAliasStatementNode(SimpleStatementNode):
    """Generated node for type_alias_statement."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['type_alias_statement'] = TypeAliasStatementNode

class TypeParameterNode(TSNode):
    """Generated node for type_parameter."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['type_parameter'] = TypeParameterNode

class TypedDefaultParameterNode(ParameterNode):
    """Generated node for typed_default_parameter."""
    __match_args__ = ('type_name', 'name', 'type', 'value')
    @property
    def name(self) -> IdentifierNode:
        """Access name field."""
        for child in self.children:
            if child.field_name == 'name':
                return child
        raise ValueError(f'Required field name not found')

    @property
    def type(self) -> TypeTokenNode:
        """Access type field."""
        for child in self.children:
            if child.field_name == 'type':
                return child
        raise ValueError(f'Required field type not found')

    @property
    def value(self) -> ExpressionNode:
        """Access value field."""
        for child in self.children:
            if child.field_name == 'value':
                return child
        raise ValueError(f'Required field value not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['typed_default_parameter'] = TypedDefaultParameterNode

class TypedParameterNode(ParameterNode):
    """Generated node for typed_parameter."""
    __match_args__ = ('type_name', 'type')
    @property
    def type(self) -> TypeTokenNode:
        """Access type field."""
        for child in self.children:
            if child.field_name == 'type':
                return child
        raise ValueError(f'Required field type not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['typed_parameter'] = TypedParameterNode

class UnaryOperatorNode(PrimaryExpressionNode):
    """Generated node for unary_operator."""
    __match_args__ = ('type_name', 'argument', 'operator')
    @property
    def argument(self) -> PrimaryExpressionNode:
        """Access argument field."""
        for child in self.children:
            if child.field_name == 'argument':
                return child
        raise ValueError(f'Required field argument not found')

    @property
    def operator(self) -> PlusTokenNode | MinusTokenNode | TildeTokenNode:
        """Access operator field."""
        for child in self.children:
            if child.field_name == 'operator':
                return child
        raise ValueError(f'Required field operator not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['unary_operator'] = UnaryOperatorNode

class UnionPatternNode(TSNode):
    """Generated node for union_pattern."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['union_pattern'] = UnionPatternNode

class UnionTypeNode(TSNode):
    """Generated node for union_type."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['union_type'] = UnionTypeNode

class WhileStatementNode(CompoundStatementNode):
    """Generated node for while_statement."""
    __match_args__ = ('type_name', 'alternative', 'body', 'condition')
    @property
    def alternative(self) -> Optional[ElseClauseNode]:
        """Access alternative field."""
        for child in self.children:
            if child.field_name == 'alternative':
                return child
        return None

    @property
    def body(self) -> BlockNode:
        """Access body field."""
        for child in self.children:
            if child.field_name == 'body':
                return child
        raise ValueError(f'Required field body not found')

    @property
    def condition(self) -> ExpressionNode:
        """Access condition field."""
        for child in self.children:
            if child.field_name == 'condition':
                return child
        raise ValueError(f'Required field condition not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['while_statement'] = WhileStatementNode

class WildcardImportNode(TSNode):
    """Generated node for wildcard_import."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['wildcard_import'] = WildcardImportNode

class WithClauseNode(TSNode):
    """Generated node for with_clause."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['with_clause'] = WithClauseNode

class WithItemNode(TSNode):
    """Generated node for with_item."""
    __match_args__ = ('type_name', 'value')
    @property
    def value(self) -> ExpressionNode:
        """Access value field."""
        for child in self.children:
            if child.field_name == 'value':
                return child
        raise ValueError(f'Required field value not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['with_item'] = WithItemNode

class WithStatementNode(CompoundStatementNode):
    """Generated node for with_statement."""
    __match_args__ = ('type_name', 'body')
    @property
    def body(self) -> BlockNode:
        """Access body field."""
        for child in self.children:
            if child.field_name == 'body':
                return child
        raise ValueError(f'Required field body not found')

    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['with_statement'] = WithStatementNode

class YieldTokenNode(TSNode):
    """Generated node for yield."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['yield'] = YieldTokenNode

class NotEqualsTokenNode(TSNode):
    """Generated node for !=."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['!='] = NotEqualsTokenNode

class PercentTokenNode(TSNode):
    """Generated node for %."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['%'] = PercentTokenNode

class ModEqualsTokenNode(TSNode):
    """Generated node for %=."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['%='] = ModEqualsTokenNode

class AmpersandTokenNode(TSNode):
    """Generated node for &."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['&'] = AmpersandTokenNode

class AmpersandEqualsTokenNode(TSNode):
    """Generated node for &=."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['&='] = AmpersandEqualsTokenNode

class LeftParenTokenNode(TSNode):
    """Generated node for (."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['('] = LeftParenTokenNode

class RightParenTokenNode(TSNode):
    """Generated node for )."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP[')'] = RightParenTokenNode

class AsteriskTokenNode(TSNode):
    """Generated node for *."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['*'] = AsteriskTokenNode

class PowerTokenNode(TSNode):
    """Generated node for **."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['**'] = PowerTokenNode

class PowerEqualsTokenNode(TSNode):
    """Generated node for **=."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['**='] = PowerEqualsTokenNode

class TimesEqualsTokenNode(TSNode):
    """Generated node for *=."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['*='] = TimesEqualsTokenNode

class PlusTokenNode(TSNode):
    """Generated node for +."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['+'] = PlusTokenNode

class PlusEqualsTokenNode(TSNode):
    """Generated node for +=."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['+='] = PlusEqualsTokenNode

class CommaTokenNode(TSNode):
    """Generated node for ,."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP[','] = CommaTokenNode

class MinusTokenNode(TSNode):
    """Generated node for -."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['-'] = MinusTokenNode

class MinusEqualsTokenNode(TSNode):
    """Generated node for -=."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['-='] = MinusEqualsTokenNode

class ArrowTokenNode(TSNode):
    """Generated node for ->."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['->'] = ArrowTokenNode

class DotTokenNode(TSNode):
    """Generated node for .."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['.'] = DotTokenNode

class SlashTokenNode(TSNode):
    """Generated node for /."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['/'] = SlashTokenNode

class FloorDivTokenNode(TSNode):
    """Generated node for //."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['//'] = FloorDivTokenNode

class FloorDivEqualsTokenNode(TSNode):
    """Generated node for //=."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['//='] = FloorDivEqualsTokenNode

class DivideEqualsTokenNode(TSNode):
    """Generated node for /=."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['/='] = DivideEqualsTokenNode

class ColonTokenNode(TSNode):
    """Generated node for :."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP[':'] = ColonTokenNode

class WalrusTokenNode(TSNode):
    """Generated node for :=."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP[':='] = WalrusTokenNode

class SemicolonTokenNode(TSNode):
    """Generated node for ;."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP[';'] = SemicolonTokenNode

class LessThanTokenNode(TSNode):
    """Generated node for <."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['<'] = LessThanTokenNode

class LeftShiftTokenNode(TSNode):
    """Generated node for <<."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['<<'] = LeftShiftTokenNode

class LeftShiftEqualsTokenNode(TSNode):
    """Generated node for <<=."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['<<='] = LeftShiftEqualsTokenNode

class LessEqualsTokenNode(TSNode):
    """Generated node for <=."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['<='] = LessEqualsTokenNode

class NotEqualsAltTokenNode(TSNode):
    """Generated node for <>."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['<>'] = NotEqualsAltTokenNode

class EqualsTokenNode(TSNode):
    """Generated node for =."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['='] = EqualsTokenNode

class EqualityTokenNode(TSNode):
    """Generated node for ==."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['=='] = EqualityTokenNode

class GreaterThanTokenNode(TSNode):
    """Generated node for >."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['>'] = GreaterThanTokenNode

class GreaterEqualsTokenNode(TSNode):
    """Generated node for >=."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['>='] = GreaterEqualsTokenNode

class RightShiftTokenNode(TSNode):
    """Generated node for >>."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['>>'] = RightShiftTokenNode

class RightShiftEqualsTokenNode(TSNode):
    """Generated node for >>=."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['>>='] = RightShiftEqualsTokenNode

class AtTokenNode(TSNode):
    """Generated node for @."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['@'] = AtTokenNode

class AtEqualsTokenNode(TSNode):
    """Generated node for @=."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['@='] = AtEqualsTokenNode

class LeftBracketTokenNode(TSNode):
    """Generated node for [."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['['] = LeftBracketTokenNode

class BackslashTokenNode(TSNode):
    """Generated node for \."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['\\'] = BackslashTokenNode

class RightBracketTokenNode(TSNode):
    """Generated node for ]."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP[']'] = RightBracketTokenNode

class CaretTokenNode(TSNode):
    """Generated node for ^."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['^'] = CaretTokenNode

class CaretEqualsTokenNode(TSNode):
    """Generated node for ^=."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['^='] = CaretEqualsTokenNode

class UnderscoreTokenNode(TSNode):
    """Generated node for _."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['_'] = UnderscoreTokenNode

class FutureTokenNode(TSNode):
    """Generated node for __future__."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['__future__'] = FutureTokenNode

class AndTokenNode(TSNode):
    """Generated node for and."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['and'] = AndTokenNode

class AsTokenNode(TSNode):
    """Generated node for as."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['as'] = AsTokenNode

class AssertTokenNode(TSNode):
    """Generated node for assert."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['assert'] = AssertTokenNode

class AsyncTokenNode(TSNode):
    """Generated node for async."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['async'] = AsyncTokenNode

class BreakTokenNode(TSNode):
    """Generated node for break."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['break'] = BreakTokenNode

class CaseTokenNode(TSNode):
    """Generated node for case."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['case'] = CaseTokenNode

class ClassTokenNode(TSNode):
    """Generated node for class."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['class'] = ClassTokenNode

class CommentNode(TSNode):
    """Generated node for comment."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['comment'] = CommentNode

class ContinueTokenNode(TSNode):
    """Generated node for continue."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['continue'] = ContinueTokenNode

class DefTokenNode(TSNode):
    """Generated node for def."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['def'] = DefTokenNode

class DelTokenNode(TSNode):
    """Generated node for del."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['del'] = DelTokenNode

class ElifTokenNode(TSNode):
    """Generated node for elif."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['elif'] = ElifTokenNode

class EllipsisNode(PrimaryExpressionNode):
    """Generated node for ellipsis."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['ellipsis'] = EllipsisNode

class ElseTokenNode(TSNode):
    """Generated node for else."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['else'] = ElseTokenNode

class EscapeInterpolationNode(TSNode):
    """Generated node for escape_interpolation."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['escape_interpolation'] = EscapeInterpolationNode

class EscapeSequenceNode(TSNode):
    """Generated node for escape_sequence."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['escape_sequence'] = EscapeSequenceNode

class ExceptTokenNode(TSNode):
    """Generated node for except."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['except'] = ExceptTokenNode

class ExceptStarTokenNode(TSNode):
    """Generated node for except*."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['except*'] = ExceptStarTokenNode

class ExecTokenNode(TSNode):
    """Generated node for exec."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['exec'] = ExecTokenNode

class FalseNode(PrimaryExpressionNode):
    """Generated node for false."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['false'] = FalseNode

class FinallyTokenNode(TSNode):
    """Generated node for finally."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['finally'] = FinallyTokenNode

class FloatNode(PrimaryExpressionNode):
    """Generated node for float."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['float'] = FloatNode

class ForTokenNode(TSNode):
    """Generated node for for."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['for'] = ForTokenNode

class FromTokenNode(TSNode):
    """Generated node for from."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['from'] = FromTokenNode

class GlobalTokenNode(TSNode):
    """Generated node for global."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['global'] = GlobalTokenNode

class IdentifierNode(PrimaryExpressionNode):
    """Generated node for identifier."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['identifier'] = IdentifierNode

class IfTokenNode(TSNode):
    """Generated node for if."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['if'] = IfTokenNode

class ImportTokenNode(TSNode):
    """Generated node for import."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['import'] = ImportTokenNode

class InTokenNode(TSNode):
    """Generated node for in."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['in'] = InTokenNode

class IntegerNode(PrimaryExpressionNode):
    """Generated node for integer."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['integer'] = IntegerNode

class IsTokenNode(TSNode):
    """Generated node for is."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['is'] = IsTokenNode

class IsNotTokenNode(TSNode):
    """Generated node for is not."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['is not'] = IsNotTokenNode

class LineContinuationNode(TSNode):
    """Generated node for line_continuation."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['line_continuation'] = LineContinuationNode

class MatchTokenNode(TSNode):
    """Generated node for match."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['match'] = MatchTokenNode

class NoneNode(PrimaryExpressionNode):
    """Generated node for none."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['none'] = NoneNode

class NonlocalTokenNode(TSNode):
    """Generated node for nonlocal."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['nonlocal'] = NonlocalTokenNode

class NotTokenNode(TSNode):
    """Generated node for not."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['not'] = NotTokenNode

class NotInTokenNode(TSNode):
    """Generated node for not in."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['not in'] = NotInTokenNode

class OrTokenNode(TSNode):
    """Generated node for or."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['or'] = OrTokenNode

class PassTokenNode(TSNode):
    """Generated node for pass."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['pass'] = PassTokenNode

class PrintTokenNode(TSNode):
    """Generated node for print."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['print'] = PrintTokenNode

class RaiseTokenNode(TSNode):
    """Generated node for raise."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['raise'] = RaiseTokenNode

class ReturnTokenNode(TSNode):
    """Generated node for return."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['return'] = ReturnTokenNode

class StringEndNode(TSNode):
    """Generated node for string_end."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['string_end'] = StringEndNode

class StringStartNode(TSNode):
    """Generated node for string_start."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['string_start'] = StringStartNode

class TrueNode(PrimaryExpressionNode):
    """Generated node for true."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['true'] = TrueNode

class TryTokenNode(TSNode):
    """Generated node for try."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['try'] = TryTokenNode

class TypeConversionNode(TSNode):
    """Generated node for type_conversion."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['type_conversion'] = TypeConversionNode

class WhileTokenNode(TSNode):
    """Generated node for while."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['while'] = WhileTokenNode

class WithTokenNode(TSNode):
    """Generated node for with."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['with'] = WithTokenNode

class LeftBraceTokenNode(TSNode):
    """Generated node for {."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['{'] = LeftBraceTokenNode

class PipeTokenNode(TSNode):
    """Generated node for |."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['|'] = PipeTokenNode

class PipeEqualsTokenNode(TSNode):
    """Generated node for |=."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['|='] = PipeEqualsTokenNode

class RightBraceTokenNode(TSNode):
    """Generated node for }."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['}'] = RightBraceTokenNode

class TildeTokenNode(TSNode):
    """Generated node for ~."""
    def insert_child(self, index: int, child: TSNode) -> TSNode:
        """Insert child at index with grammar validation."""
        # TODO: Add grammar validation logic
        new_children = list(self.children)
        new_children.insert(index, child)
        return self.model_copy(update={'children': new_children})

    def replace_child(self, old_child: TSNode, new_child: TSNode) -> TSNode:
        """Replace child with grammar validation."""
        new_children = [
            new_child if c == old_child else c
            for c in self.children
        ]
        return self.model_copy(update={'children': new_children})

    def delete_child(self, child: TSNode) -> TSNode:
        """Delete child with grammar validation."""
        new_children = [c for c in self.children if c != child]
        return self.model_copy(update={'children': new_children})


NODE_MAP['~'] = TildeTokenNode

# Auto-register subclasses
TSNode.register_subclasses(NODE_MAP)
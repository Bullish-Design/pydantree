#!/usr/bin/env python3
"""
builder_demo.py

Demonstrates how to use PyClassBuilder and PyFunctionBuilder to construct
an inâ€‘memory Python class model and print the generated source stubs.
"""

from pydantree import PyClassBuilder, PyFunctionBuilder


def main() -> None:
    # Build a function with parameters and a return type.
    say_hi_func = (
        PyFunctionBuilder("say_hi")
        .with_param("name", "str")
        .with_return_type("str")
        .with_docstring("Return a friendly greeting.")
        .build()
    )

    # Build a class that uses the function and an attribute.
    greeter_cls = (
        PyClassBuilder("Greeter")
        .with_docstring("Simple example class built with Pydantree.")
        .with_method(say_hi_func)
        .with_attribute("GREETING", "str", '"Hello"')
        .build()
    )

    # Print the lightweight representations generated by the helpers.
    print("Class Definition Stub:")
    print(greeter_cls.to_class_definition())
    print(f"\n{greeter_cls}\n")

    print("\nMethod Signature Stub:")
    print(say_hi_func.to_signature())
    print(f"\n{say_hi_func}\n")


if __name__ == "__main__":
    main()
